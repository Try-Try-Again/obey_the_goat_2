RULE #1
Dont Repat Yourself

RULE #2
Do Nothing Without a Test

RULE #3
Do Easy

-scratchpad-

- Remove hardcoded URLs from views.py
- Remove hardcoded URL form forms in list.html and home.html
- Remove duplication of validation logic in views
- Add URLs for adding a new item to an existing list via POST
- Refactor away some duplication in urls.py

*our multi user FT is posting as soon as its loaded and fails early figure out why

*re_path(r'lists/(.+)/$', views.view_list, name='view_list'),
	              ^ This capture group magically ends up as an arguemnet
				    for whatever view it points to. Neat!

personal to-do's
- figure out how to assign ansible variables at runtime
- change info in the vault files
- add new rsa_id.pub to github repo

playbook requirements:
run 'first 5 first'
1. get latest app source
	git fetch/clone from source repo

2. create or update .env
	ensure a venv exists
	run bin/pip install -r requirements.txt
3. update virtualenv
	*Harry's script adds stuff to .env with append()
	I'd rather use my version of creating a .env file
	with ansible
4. update static files
	manage.py collectstatic --noinput

5. update databases
	manage.py migrate --noinput



NOTES:
* as soon as your test goes green:
	- clean up the tested code as much as you can
	- if your test method has changed to test something new and different,
	  put it in a new and different testcase class
	  *Do the same for both UT's and FT's

Shipping:
after you go through the TDD loop enough and your project is at the point where
'someone' could use it, its time to put it online

- fire up a VM somewhere
- your playbook will contain all the things that need to be done server side.
  Review and revise the playbook often to ensure the site remains safe and reliable

- you can run a test server on 8000 like this:
  ./virtualenv/bin/python manage.py runserver 0.0.0.0:8000
  the site this now online with only a wimpy test server

* Not sure when static was supposed to be ignored, but now it's showing up server side.
  we'll have to go back and find out how and when it should have been ignored

* pain points
  - networking
  - ports
  - static files
  - database

Automation Goals
Provision
- install nginx, git, python3, python3-venv
- add Nginx config file for virtual host
- add a Systemd job for Gunicorn
Deploy
- create directory in ~/sites
- Pull down source code
- start virtualenv in virtualenv
- pip install -r requirements.txt
- manage.py migrate for database
- collectstatic for static files
- Restart Gunicorn job
- Run FT's to check everything works


development:
FT's
UT's
app source code
config files
static files

operations:
ci (jenkins)
playbooks
playbook tests
static files and templates
docker files
backup
security

We have a lot to do before a site is in a good spot.
which means we DRY is in full effect
